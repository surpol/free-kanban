<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Free Kanban">
    <title>Free Kanban</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.1.2/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.2/sql-wasm.js"></script>
</head>
<body class="bg-gray-300">
    <div class="container mx-auto p-4">
        <h1 class="text-5xl font-semibold mb-4">Free Kanban</h1>
        <div class="flex flex-row space-x-2 mb-6">
            <!-- Add New Story Button -->
            <button id="add-story-button" class="bg-blue-500 text-white px-4 py-2">Add Story</button>
            <a href="#" id="export-db-button" class="bg-gray-500 text-white px-4 py-2">Export Database</a>
            <input type="file" id="db-file-upload" class="hidden" />
            <label for="db-file-upload" class="bg-gray-500 text-white px-4 py-2 cursor-pointer">Import Database</label>
        </div>

        <!-- Flexbox layout for the story columns -->
        <div class="flex gap-4" id="story-columns">
            <!-- Story columns will be populated dynamically -->
        </div>
    </div>

    <!-- Modal for Editing or Reading Story (Hidden by default) -->
    <div id="story-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center">
        <div class="bg-white p-6 w-1/3">
            <h2 id="story-modal-title" class="text-2xl font-semibold mb-4">Edit Story</h2>
            <form id="edit-story-form">
                <input type="hidden" id="story-id" name="id">
                <div class="mb-4">
                    <label class="block text-lg font-semibold">Title</label>
                    <input type="text" id="story-title" name="title" class="w-full p-2 border border-gray-300">
                </div>
                <div class="mb-4">
                    <label class="block text-lg font-semibold">Description</label>
                    <textarea id="story-description" name="description" class="w-full p-2 border border-gray-300" style="width: 100%; height: 300px;"></textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-lg font-semibold">Status</label>
                    <select id="story-status" name="status" class="w-full p-2 border border-gray-300">
                        <option value="1">Not Started</option>
                        <option value="2">In Progress</option>
                        <option value="3">Completed</option>
                    </select>
                </div>
                <div class="flex justify-end">
                    <button type="button" id="cancel-edit-story-button" class="mr-4 bg-gray-300 px-4 py-2 hover:bg-gray-100">Cancel</button>
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 hover:bg-blue-200">Update Story</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal for Adding New Story (Hidden by default) -->
    <div id="new-story-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center">
        <div class="bg-white p-6 w-1/3">
            <h2 class="text-2xl font-semibold mb-4">Add New Story</h2>
            <form id="add-story-form">
                <div class="mb-4">
                    <label class="block text-lg font-semibold">Title</label>
                    <input type="text" id="new-story-title" name="title" class="w-full p-2 border border-gray-300" required>
                </div>
                <div class="mb-4">
                    <label class="block text-lg font-semibold">Description</label>
                    <textarea id="new-story-description" name="description" class="w-full p-2 border border-gray-300" required></textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-lg font-semibold">Status</label>
                    <select id="new-story-status" name="status" class="w-full p-2 border border-gray-300">
                        <option value="1">Not Started</option>
                        <option value="2">In Progress</option>
                        <option value="3">Completed</option>
                    </select>
                </div>
                <div class="flex justify-end">
                    <button type="button" id="cancel-new-story-button" class="mr-4 bg-gray-300 px-4 py-2 hover:bg-gray-100">Cancel</button>
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 hover:bg-blue-200">Add Story</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        let db;

        // Initialize SQL.js and the in-memory database
        function initializeDb() {
            const SQL = window.SQL;
            db = new SQL.Database();
            db.run(`
                CREATE TABLE IF NOT EXISTS stories (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    title TEXT NOT NULL,
                    description TEXT NOT NULL,
                    status INTEGER
                );
            `);
            console.log('Database initialized');
            renderStories();
        }

        // Load SQL.js module and initialize the database
        window.initSqlJs({
            locateFile: filename => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.2/${filename}`
        }).then(SQL => {
            window.SQL = SQL;
            initializeDb();
        });

        // Render the stories into the columns
        function renderStories() {
            const result = db.exec("SELECT * FROM stories");
            const rows = result.length ? result[0].values : [];

            const notStarted = rows.filter(story => story[3] === 1);
            const inProgress = rows.filter(story => story[3] === 2);
            const completed = rows.filter(story => story[3] === 3);

            const storyColumns = `
                <div class="w-1/3">
                    <h2 class="text-2xl font-semibold mb-4">New</h2>
                    <div id="not-started" class="p-4 bg-gray-200 min-h-screen">
                        ${notStarted.map(story => generateStoryHtml(story)).join('')}
                    </div>
                </div>
                <div class="w-1/3">
                    <h2 class="text-2xl font-semibold mb-4">In Progress</h2>
                    <div id="in-progress" class="p-4 bg-gray-200 min-h-screen">
                        ${inProgress.map(story => generateStoryHtml(story)).join('')}
                    </div>
                </div>
                <div class="w-1/3">
                    <h2 class="text-2xl font-semibold mb-4">Completed</h2>
                    <div id="completed" class="p-4 bg-gray-200 min-h-screen">
                        ${completed.map(story => generateStoryHtml(story)).join('')}
                    </div>
                </div>
            `;

            document.getElementById('story-columns').innerHTML = storyColumns;
        }

        // Generate HTML for a single story
        function generateStoryHtml([id, title, description, status]) {
            return `
                <div class="story-card mb-4 p-4 bg-white shadow-md cursor-pointer" data-id="${id}" data-title="${title}" data-description="${description}" data-status="${status}">
                    <h3 class="text-xl font-semibold">${title}</h3>
                    <p>${description}</p>
                    <button class="delete-button bg-red-500 text-white px-2 py-1 mt-1" data-id="${id}">delete</button>
                </div>
            `;
        }

        // Handle Add Story button click to show the modal
        document.getElementById('add-story-button').addEventListener('click', function () {
            // Clear the form fields
            document.getElementById('new-story-title').value = '';
            document.getElementById('new-story-description').value = '';
            document.getElementById('new-story-status').value = '1';

            // Show the modal
            document.getElementById('new-story-modal').classList.remove('hidden');
        });

        // Handle Add Story form submission
        document.getElementById('add-story-form').addEventListener('submit', function (e) {
            e.preventDefault();
            const title = document.getElementById('new-story-title').value;
            const description = document.getElementById('new-story-description').value;
            const status = document.getElementById('new-story-status').value;

            db.run(`INSERT INTO stories (title, description, status) VALUES (?, ?, ?)`, [title, description, status]);

            document.getElementById('new-story-modal').classList.add('hidden');
            renderStories();
        });

        // Handle click on a story to open it in a modal for updating
        document.addEventListener('click', function (e) {
            if (e.target.closest('.story-card') && !e.target.closest('.delete-button')) {
                const storyCard = e.target.closest('.story-card');
                const storyId = storyCard.getAttribute('data-id');
                const title = storyCard.getAttribute('data-title');
                const description = storyCard.getAttribute('data-description');
                const status = storyCard.getAttribute('data-status');

                // Set form fields in the edit modal
                document.getElementById('story-id').value = storyId;
                document.getElementById('story-title').value = title;
                document.getElementById('story-description').value = description;
                document.getElementById('story-status').value = status;

                // Show the modal
                document.getElementById('story-modal').classList.remove('hidden');
            }
        });

        // Handle update story form submission
        document.getElementById('edit-story-form').addEventListener('submit', function (e) {
            e.preventDefault();
            const id = document.getElementById('story-id').value;
            const title = document.getElementById('story-title').value;
            const description = document.getElementById('story-description').value;
            const status = document.getElementById('story-status').value;

            db.run(`UPDATE stories SET title = ?, description = ?, status = ? WHERE id = ?`, [title, description, status, id]);

            document.getElementById('story-modal').classList.add('hidden');
            renderStories();
        });

        // Close modals when cancel button is clicked
        document.getElementById('cancel-edit-story-button').addEventListener('click', function () {
            document.getElementById('story-modal').classList.add('hidden');
        });

        document.getElementById('cancel-new-story-button').addEventListener('click', function () {
            document.getElementById('new-story-modal').classList.add('hidden');
        });

        // Delete story functionality
        document.addEventListener('click', function (e) {
            if (e.target.closest('.delete-button')) {
                e.stopPropagation(); // Prevent triggering the story card click event
                const storyId = e.target.getAttribute('data-id');

                db.run('DELETE FROM stories WHERE id = ?', [storyId]);
                renderStories();
            }
        });

        // Handle Export Database button click to download the .db file
        document.getElementById('export-db-button').addEventListener('click', function () {
            const binaryArray = db.export(); // Export the database as a binary array
            const blob = new Blob([binaryArray], { type: 'application/x-sqlite3' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'storyboard.db';
            link.click();
        });

        // Handle Import Database and populate the stories
        document.getElementById('db-file-upload').addEventListener('change', function (event) {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function () {
                const uints = new Uint8Array(reader.result);
                db = new window.SQL.Database(uints);
                renderStories();
            };
            reader.readAsArrayBuffer(file);
        });
    </script>
</body>
</html>
